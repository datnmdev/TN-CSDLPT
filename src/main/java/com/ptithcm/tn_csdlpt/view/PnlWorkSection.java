/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.ptithcm.tn_csdlpt.view;

import com.ptithcm.tn_csdlpt.entity.BoDe;
import com.ptithcm.tn_csdlpt.entity.GiaoVien;
import com.ptithcm.tn_csdlpt.global_variable.LoginVariables;
import com.ptithcm.tn_csdlpt.global_variable.SubscribersVariables;
import com.ptithcm.tn_csdlpt.service.GiaoVienService;
import com.ptithcm.tn_csdlpt.service.SubscriberService;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author MINHDAT
 */
public class PnlWorkSection extends javax.swing.JPanel {
    private List<BoDe> questions;
    private PnlManageBar pnlManageBar;
    private PnlQuestionInfo pnlQuestionInfo;

    /**
     * Creates new form pnlWorkSection
     */
    public PnlWorkSection(String tabName, String groupName) throws IOException {
        initComponents();
        initMyComponents(tabName);
        disableComponents(groupName);
        fillSideComboBox(groupName);
        addEvents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlManageBarContainer = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        cboSide = new javax.swing.JComboBox<>();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        pnlDataEntryFormContainer = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());

        pnlManageBarContainer.setOpaque(false);
        pnlManageBarContainer.setLayout(new java.awt.CardLayout());
        add(pnlManageBarContainer, java.awt.BorderLayout.NORTH);

        jPanel2.setOpaque(false);
        jPanel2.setLayout(new java.awt.CardLayout(5, 5));

        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setOpaque(false);
        jPanel4.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        cboSide.setMinimumSize(new java.awt.Dimension(200, 40));
        cboSide.setPreferredSize(new java.awt.Dimension(200, 30));
        jPanel6.add(cboSide);

        jPanel4.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel7.setOpaque(false);
        jPanel7.setLayout(new java.awt.CardLayout());

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblData);

        jPanel7.add(jScrollPane1, "card2");

        jPanel4.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.CENTER);

        pnlDataEntryFormContainer.setLayout(new java.awt.CardLayout());
        jPanel3.add(pnlDataEntryFormContainer, java.awt.BorderLayout.EAST);

        jPanel2.add(jPanel3, "card2");

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    public void addEvents() {
//        tblData.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
//            @Override
//            public void valueChanged(ListSelectionEvent e) {
//                int[] selectedRows = tblData.getSelectedRows();
//                
//                
//            }
//        });
        tblData.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                try {
                    int selectedRow = tblData.getSelectedRow();
                    fillQuestionInfoForm(questions.get(selectedRow));
                } catch (SQLException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                }
            }
        });
        
//        Xử lý sự kiện nút add
        pnlManageBar.getBtnAdd().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnAdd().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnAdd().setForeground(Color.RED);
                pnlManageBar.getBtnAdd().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnAdd().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnAdd().setForeground(Color.BLACK);
                pnlManageBar.getBtnAdd().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });
        
        pnlManageBar.getBtnAdd().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnAdd().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnAdd().setForeground(Color.RED);
                pnlManageBar.getBtnAdd().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });
        
//        Xử lý sự kiện nút update      
        pnlManageBar.getBtnUpdate().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnUpdate().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnUpdate().setForeground(Color.RED);
                pnlManageBar.getBtnUpdate().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnUpdate().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnUpdate().setForeground(Color.BLACK);
                pnlManageBar.getBtnUpdate().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });
        
        pnlManageBar.getBtnUpdate().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnUpdate().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnUpdate().setForeground(Color.RED);
                pnlManageBar.getBtnUpdate().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });
        
//        Xử lý sự kiện nút delete      
        pnlManageBar.getBtnDelete().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnDelete().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnDelete().setForeground(Color.RED);
                pnlManageBar.getBtnDelete().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnDelete().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnDelete().setForeground(Color.BLACK);
                pnlManageBar.getBtnDelete().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });
        
        pnlManageBar.getBtnDelete().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnDelete().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnDelete().setForeground(Color.RED);
                pnlManageBar.getBtnDelete().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });
        
//        Xử lý sự kiện nút save      
        pnlManageBar.getBtnSave().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnSave().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnSave().setForeground(Color.RED);
                pnlManageBar.getBtnSave().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnSave().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnSave().setForeground(Color.BLACK);
                pnlManageBar.getBtnSave().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });
        
        pnlManageBar.getBtnSave().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnSave().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnSave().setForeground(Color.RED);
                pnlManageBar.getBtnSave().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });      
        
//        Xử lý sự kiện nút undo  
        pnlManageBar.getBtnUndo().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnUndo().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnUndo().setForeground(Color.RED);
                pnlManageBar.getBtnUndo().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnUndo().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnUndo().setForeground(Color.BLACK);
                pnlManageBar.getBtnUndo().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });
        
        pnlManageBar.getBtnUndo().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnUndo().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnUndo().setForeground(Color.RED);
                pnlManageBar.getBtnUndo().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });
        
//        Xử lý sự kiện nút reload  
        pnlManageBar.getBtnReload().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnReload().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnReload().setForeground(Color.RED);
                pnlManageBar.getBtnReload().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnReload().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnReload().setForeground(Color.BLACK);
                pnlManageBar.getBtnReload().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });
        
        pnlManageBar.getBtnReload().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnReload().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnReload().setForeground(Color.RED);
                pnlManageBar.getBtnReload().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

//        Xử lý sự kiện nút export file  
        pnlManageBar.getBtnExportFile().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnExportFile().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnExportFile().setForeground(Color.RED);
                pnlManageBar.getBtnExportFile().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnExportFile().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnExportFile().setForeground(Color.BLACK);
                pnlManageBar.getBtnExportFile().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });
        
        pnlManageBar.getBtnExportFile().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnExportFile().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnExportFile().setForeground(Color.RED);
                pnlManageBar.getBtnExportFile().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });
    }
    
//    Methods
    public void initMyComponents(String tabName) {
        pnlManageBarContainer.add((pnlManageBar = new PnlManageBar()));
        switch (tabName) {
            case "Quản lý bộ đề":
//                Cập nhật thông tin cột dữ liệu
                DefaultTableModel model = new DefaultTableModel();
                String[] columns = {
                    "Id câu hỏi", "Mã môn học", "Trình độ", "Nội dung", 
                    "A", "B", "C", "D", "Đáp án", "Giáo viên soạn"
                };
                for (String column : columns) {
                    model.addColumn(column);
                }
                tblData.setModel(model);
                
//                Thêm form thao tác nhập liệu tương ứng
                pnlDataEntryFormContainer.add((pnlQuestionInfo = new PnlQuestionInfo()));
                break;
            
        }
    }
    
    public void disableComponents(String groupName) {
        switch (groupName) {
            case "TRUONG":
                pnlManageBar.getBtnAdd().setEnabled(false);
                pnlManageBar.getBtnUpdate().setEnabled(false);
                pnlManageBar.getBtnDelete().setEnabled(false);
                pnlManageBar.getBtnSave().setEnabled(false);
                pnlManageBar.getBtnUndo().setEnabled(false);
                break;
            default:
                cboSide.setEnabled(false);
        }
    }
    
    public void fillSideComboBox(String groupName) throws IOException {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        switch (groupName) {
            case "TRUONG":
                model.addAll(new SubscriberService().getActiveSubcribers(SubscribersVariables.subscribers));
                break;
            default:
                model.addElement(LoginVariables.databaseConnector.getAccount().getSubscriber());
        }
        cboSide.setModel(model);
    }
    
    public void fillDataTable(List<BoDe> questions) {
        DefaultTableModel dataModel = (DefaultTableModel) tblData.getModel();
        dataModel.setRowCount(0);
        for (BoDe question : questions) {
            List<String> row = new ArrayList<>();
            row.add(String.valueOf(question.getCauHoi()));
            row.add(question.getMaMH());
            row.add(question.getTrinhDo());
            row.add(question.getNoiDung());
            row.add(question.getA());
            row.add(question.getB());
            row.add(question.getC());
            row.add(question.getD());
            row.add(question.getDapAn());
            row.add(question.getMaGV());
            dataModel.addRow(row.toArray());
        }
    }
    
    public void fillQuestionInfoForm(BoDe question) throws SQLException {
        pnlQuestionInfo.getTxtQuestionId().setText(String.valueOf(question.getCauHoi()));
        pnlQuestionInfo.setSelectedSubjectItem(question.getMaMH());
        pnlQuestionInfo.getCboLevel().setSelectedItem(question.getTrinhDo());
        pnlQuestionInfo.getTxtAreaContent().setText(question.getNoiDung());
        pnlQuestionInfo.getTxtAreaQuestionA().setText(question.getA());
        pnlQuestionInfo.getTxtAreaQuestionB().setText(question.getB());
        pnlQuestionInfo.getTxtAreaQuestionC().setText(question.getC());
        pnlQuestionInfo.getTxtAreaQuestionD().setText(question.getD());
        pnlQuestionInfo.getCboAnswer().setSelectedItem(question.getDapAn());
        GiaoVien teacher = new GiaoVienService().getTeacher(question.getMaGV());
        if (teacher != null) {
            pnlQuestionInfo.getTxtTeacherInfo().setText(teacher.toString());
        } else {
            pnlQuestionInfo.getTxtTeacherInfo().setText(question.getMaGV());
        }
        
    }
    
//    Getters and setters
    public PnlManageBar getPnlManageBar() {
        return pnlManageBar;
    }

    public void setPnlManageBar(PnlManageBar pnlManageBar) {
        this.pnlManageBar = pnlManageBar;
    }

    public PnlQuestionInfo getPnlQuestionInfo() {
        return pnlQuestionInfo;
    }

    public void setPnlQuestionInfo(PnlQuestionInfo pnlQuestionInfo) {
        this.pnlQuestionInfo = pnlQuestionInfo;
    }

    public DefaultTableModel getDataModel() {
        return (DefaultTableModel) tblData.getModel();
    }

    public void setDataModel(DefaultTableModel dataModel) {
        tblData.setModel(dataModel);
    }

    public DefaultComboBoxModel getCboSideModel() {
        return (DefaultComboBoxModel) cboSide.getModel();
    }

    public void setCboSideModel(DefaultComboBoxModel cboSideModel) {
        cboSide.setModel(cboSideModel);
    }

    public JTable getTblData() {
        return tblData;
    }

    public void setTblData(JTable tblData) {
        this.tblData = tblData;
    }

    public List<BoDe> getQuestions() {
        return questions;
    }

    public void setQuestions(List<BoDe> questions) {
        this.questions = questions;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboSide;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlDataEntryFormContainer;
    private javax.swing.JPanel pnlManageBarContainer;
    private javax.swing.JTable tblData;
    // End of variables declaration//GEN-END:variables
}
