/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.ptithcm.tn_csdlpt.view;

import com.ptithcm.tn_csdlpt.controller.BoDeController;
import com.ptithcm.tn_csdlpt.entity.BoDe;
import com.ptithcm.tn_csdlpt.entity.GiaoVien;
import com.ptithcm.tn_csdlpt.exception.InvalidInputException;
import com.ptithcm.tn_csdlpt.global_variable.LoginVariables;
import com.ptithcm.tn_csdlpt.global_variable.SubscribersVariables;
import com.ptithcm.tn_csdlpt.model.dto.ActionStatusEnum;
import com.ptithcm.tn_csdlpt.model.dto.ObjectAction;
import com.ptithcm.tn_csdlpt.service.BoDeService;
import com.ptithcm.tn_csdlpt.service.UndoRedo;
import com.ptithcm.tn_csdlpt.service.GiaoVienService;
import com.ptithcm.tn_csdlpt.service.SubscriberService;
import com.ptithcm.tn_csdlpt.service.ValidateFormService;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author MINHDAT
 */
public class PnlWorkSection extends javax.swing.JPanel {
//    Các đối tượng dữ liệu dùng chung

    private FrmMain frmMain;
    private String tabName;
    private PnlManageBar pnlManageBar;
    private List<ObjectAction> objectActions;
    private UndoRedo undoRedo;
    private JPanel pnlObjectInfo;
    private PnlWorkSection _this;

    /**
     * Creates new form pnlWorkSection
     */
    public PnlWorkSection(FrmMain frmMain, String tabName, String groupName) throws IOException {
        initProperties(frmMain, tabName);
        initComponents();
        initMyComponents(tabName);
        disableComponents(groupName);
        fillSideComboBox(groupName);
        addEvents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlManageBarContainer = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        cboSide = new javax.swing.JComboBox<>();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        pnlDataEntryFormContainer = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());

        pnlManageBarContainer.setOpaque(false);
        pnlManageBarContainer.setLayout(new java.awt.CardLayout());
        add(pnlManageBarContainer, java.awt.BorderLayout.NORTH);

        jPanel2.setOpaque(false);
        jPanel2.setLayout(new java.awt.CardLayout(5, 5));

        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setOpaque(false);
        jPanel4.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        cboSide.setMinimumSize(new java.awt.Dimension(200, 40));
        cboSide.setPreferredSize(new java.awt.Dimension(200, 30));
        jPanel6.add(cboSide);

        jPanel4.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel7.setOpaque(false);
        jPanel7.setLayout(new java.awt.CardLayout());

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tblData);

        jPanel7.add(jScrollPane1, "card2");

        jPanel4.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.CENTER);

        pnlDataEntryFormContainer.setLayout(new java.awt.CardLayout());
        jPanel3.add(pnlDataEntryFormContainer, java.awt.BorderLayout.EAST);

        jPanel2.add(jPanel3, "card2");

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

//    Sự kiện con cuộn bảng
    public void scrollRectToVisible(int index) {
        Rectangle cellRect = tblData.getCellRect(index, 0, true);
        Rectangle visibleRect = tblData.getVisibleRect();
        visibleRect.y = cellRect.y;
        visibleRect.height = cellRect.height;
        tblData.scrollRectToVisible(visibleRect);;
    }

//    Thực thi các thao tác với các đối tượng được đưa vào undo, redo
    public void objectActionExecute(ObjectAction objectAction, Object[] row) {
        DefaultTableModel tblDataModel = (DefaultTableModel) tblData.getModel();
        switch (objectAction.getStatus().get(0)) {
            case INSERT:
//                        Cập nhật dữ liệu bộ nhớ tạm
                objectActions.get(objectAction.getListIndex()).getStatus().add(ActionStatusEnum.INSERT);

//                        Cập nhật dữ liệu bảng
                tblDataModel.insertRow(objectAction.getTableIndex(), row);
                tblDataModel.fireTableDataChanged();
                scrollRectToVisible(objectAction.getTableIndex());
                tblData.setRowSelectionInterval(objectAction.getTableIndex(), objectAction.getTableIndex());
                break;
            case UPDATE:
//                Cập nhật lại dữ liệu cho bộ nhớ tạm
                objectActions.get(objectAction.getListIndex()).getStatus().add(ActionStatusEnum.UPDATE);
                List<Object> objects = new ArrayList<>();
                objects.add(objectAction.getObjects().get(0));
                objectActions.get(objectAction.getListIndex()).setObjects(objects);

//                        Cập nhật dữ liệu bảng
                for (int i = 0; i < tblDataModel.getColumnCount(); ++i) {
                    tblDataModel.setValueAt(row[i], objectAction.getTableIndex(), i);
                }
                tblDataModel.fireTableRowsUpdated(objectAction.getTableIndex(), objectAction.getTableIndex());
                scrollRectToVisible(objectAction.getTableIndex());
                tblData.setRowSelectionInterval(objectAction.getTableIndex(), objectAction.getTableIndex());

                break;
            case DELETE:
//                        Cập nhật dữ liệu bộ nhớ tạm
                objectActions.get(objectAction.getListIndex()).getStatus().add(ActionStatusEnum.DELETE);

//                        Cập nhật dữ liệu bảng
                tblDataModel.removeRow(objectAction.getTableIndex());
                tblDataModel.fireTableDataChanged();
                break;
        }
    }

//    Các sự kiện được sử lý trong tab
    public void addEvents() {
        tblData.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                try {
                    int selectedRow = tblData.getSelectedRow();
                    pnlManageBar.disableManageButtons("Selected row");
                    Object question;
                    switch (tabName) {
                        case "Quản lý bộ đề":
                            question = (BoDe) getObjectFromRow(selectedRow);
                            break;
                        default:
                            throw new AssertionError();
                    }
                    if (question != null) {
                        fillObjectInfoForm(question);
                    }
                } catch (SQLException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                }
            }
        });

//        Xử lý sự kiện nút add
        pnlManageBar.getBtnAdd().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                switch (tabName) {
                    case "Quản lý bộ đề":
                        try {
//                        Đối tượng lấy thông tin
                        PnlQuestionInfo pnlQuestionInfo = (PnlQuestionInfo) pnlObjectInfo;

//                        Validate form 
                        ValidateFormService.validateFrmQuestionInfo(pnlQuestionInfo);

//                        Xử lý dữ liệu và thực hiện thao tác thêm
                        BoDe question
                                = pnlQuestionInfo.getQuestionData(pnlManageBar.getBtnAdd().getName(), objectActions);
                        int objectActionSize = objectActions.size();
                        DefaultTableModel tblDataModel = (DefaultTableModel) tblData.getModel();

                        ObjectAction objectAction = new ObjectAction(
                                ActionStatusEnum.INSERT, objectActionSize,
                                tblDataModel.getRowCount(), question
                        );

//                        Thêm đối tượng vào objectActions
                        objectActions.add(objectAction);

//                        Cập nhật lại bảng
                        Object[] row = {
                            question.getCauHoi(), question.getMaMH(), question.getTrinhDo(),
                            question.getNoiDung(), question.getA(), question.getB(), question.getC(),
                            question.getD(), question.getDapAn(), question.getMaGV()
                        };

                        tblDataModel.addRow(row);
                        tblDataModel.fireTableDataChanged();
                        scrollRectToVisible(tblDataModel.getRowCount() - 1);
                        tblData.setRowSelectionInterval(tblDataModel.getRowCount() - 1, tblDataModel.getRowCount() - 1);
                        
//                        Lưu thao tác thực hiện vào stack
                        undoRedo.execute(objectAction, objectActions);

//                        Ẩn/hiện các chức năng khác
                        pnlManageBar.disableManageButtons(pnlManageBar.getBtnAdd().getName());
                        break;
                    } catch (InvalidInputException ex) {
                        MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                    }
                }
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnAdd().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnAdd().setForeground(Color.RED);
                pnlManageBar.getBtnAdd().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnAdd().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnAdd().setForeground(Color.BLACK);
                pnlManageBar.getBtnAdd().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });

        pnlManageBar.getBtnAdd().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnAdd().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnAdd().setForeground(Color.RED);
                pnlManageBar.getBtnAdd().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

//        Xử lý sự kiện nút update      
        pnlManageBar.getBtnUpdate().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                switch (tabName) {
                    case "Quản lý bộ đề":
                        try {
//                        Đối tượng lấy dữ liệu
                        PnlQuestionInfo pnlQuestionInfo = (PnlQuestionInfo) pnlObjectInfo;

//                        Validate form
                        ValidateFormService.validateFrmQuestionInfo(pnlQuestionInfo);

//                        Xử lý dữ liệu và thực hiện thao tác cập nhật
                        BoDe question
                                = pnlQuestionInfo.getQuestionData(pnlManageBar.getBtnUpdate().getName(), objectActions);

                        int objectActionIndex = -1;
                        for (int i = 0; i < objectActions.size(); ++i) {
                            if (question.getCauHoi()
                                    == ((BoDe) objectActions.get(i).getObjects().get(0)).getCauHoi()) {
                                objectActionIndex = i;
                                break;
                            }
                        }

                        if (objectActionIndex != -1) {
                            int selectedRowIndex = tblData.getSelectedRow();
                            ObjectAction objectAction = new ObjectAction(
                                    ActionStatusEnum.UPDATE,
                                    objectActionIndex, selectedRowIndex,
                                    (BoDe) objectActions.get(objectActionIndex).getObjects().get(0)
                            );

//                        Cập nhật dữ liệu của đối tượng BoDe trong bộ nhớ tạm
                            objectActions.get(objectActionIndex).getStatus().add(ActionStatusEnum.UPDATE);
                            List<Object> objects = new ArrayList<>();
                            objects.add(question);
                            objectActions.get(objectActionIndex).setObjects(objects);

//                        Cập nhật dữ liệu cho bảng
                            DefaultTableModel tblDataModel = (DefaultTableModel) tblData.getModel();
                            Object[] row = {
                                question.getCauHoi(), question.getMaMH(), question.getTrinhDo(),
                                question.getNoiDung(), question.getA(), question.getB(), question.getC(),
                                question.getD(), question.getDapAn(), question.getMaGV()
                            };
                            for (int i = 0; i < tblDataModel.getColumnCount(); ++i) {
                                tblDataModel.setValueAt(row[i], selectedRowIndex, i);
                            }
                            tblDataModel.fireTableRowsUpdated(selectedRowIndex, selectedRowIndex);
                            scrollRectToVisible(selectedRowIndex);
                            tblData.setRowSelectionInterval(selectedRowIndex, selectedRowIndex);

//                        Lưu thay đổi vào stack
                            undoRedo.execute(objectAction, objectActions);

//                        Ẩn/hiện các nút chức năng
                            pnlManageBar.disableManageButtons(pnlManageBar.getBtnUpdate().getName());
                        }
                        break;
                    } catch (InvalidInputException ex) {
                        MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                    }
                }
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnUpdate().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnUpdate().setForeground(Color.RED);
                pnlManageBar.getBtnUpdate().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnUpdate().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnUpdate().setForeground(Color.BLACK);
                pnlManageBar.getBtnUpdate().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });

        pnlManageBar.getBtnUpdate().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnUpdate().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnUpdate().setForeground(Color.RED);
                pnlManageBar.getBtnUpdate().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

//        Xử lý sự kiện nút delete      
        pnlManageBar.getBtnDelete().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                switch (tabName) {
                    case "Quản lý bộ đề":
                        PnlQuestionInfo pnlQuestionInfo = (PnlQuestionInfo) pnlObjectInfo;
                        BoDe question
                                = pnlQuestionInfo.getQuestionData(pnlManageBar.getBtnDelete().getName(), objectActions);

                        int objectActionIndex = -1;
                        for (int i = 0; i < objectActions.size(); ++i) {
                            if (question.getCauHoi()
                                    == ((BoDe) objectActions.get(i).getObjects().get(0)).getCauHoi()) {
                                objectActionIndex = i;
                                break;
                            }
                        }

                        if (objectActionIndex != -1) {
                            int selectedRowIndex = tblData.getSelectedRow();
                            ObjectAction objectAction = new ObjectAction(
                                    ActionStatusEnum.DELETE,
                                    objectActionIndex, selectedRowIndex, question
                            );

//                        Chuyển đối trạng thái thao tác với đối tượng BoDe trong bộ nhớ tạm
                            objectActions.get(objectActionIndex).getStatus().add(ActionStatusEnum.DELETE);

//                        Cập nhật dữ liệu cho bảng
                            DefaultTableModel tblDataModel = (DefaultTableModel) tblData.getModel();
                            tblDataModel.removeRow(selectedRowIndex);
                            tblDataModel.fireTableDataChanged();

//                        Lưu thay đổi vào stack
                            undoRedo.execute(objectAction, objectActions);

//                        Ẩn/hiện các nút chức năng
                            pnlManageBar.disableManageButtons(pnlManageBar.getBtnDelete().getName());

                        }
                        break;
                }
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnDelete().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnDelete().setForeground(Color.RED);
                pnlManageBar.getBtnDelete().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnDelete().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnDelete().setForeground(Color.BLACK);
                pnlManageBar.getBtnDelete().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });

        pnlManageBar.getBtnDelete().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnDelete().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnDelete().setForeground(Color.RED);
                pnlManageBar.getBtnDelete().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

//        Xử lý sự kiện nút save      
        pnlManageBar.getBtnSave().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                try {
                    switch (tabName) {
                        case "Quản lý bộ đề":
//                            Gọi lệnh save từ tầng service
                            BoDeService.saveAll(objectActions);
                            
//                            Hiển thị hộp thoại thông báo khi nó ghi thành công
                            MessageBox.showConfirmSuccessBox("Thông báo", "Ghi thành công!");
                            
//                            Tiến hành load lại trang sau khi ghi thành công
                            //  Reset dữ liệu của bộ nhớ tạm, undo, redo
                            objectActions.clear();
                            undoRedo.reset();
                            ((DefaultTableModel) tblData.getModel()).setRowCount(0);

                            //  Load lại dữ liệu
                            BoDeController.renderData(frmMain, _this);

                            //  Reset form nhập liệu
                            ((PnlQuestionInfo) pnlObjectInfo).reset();

                            //  Reset thanh công cụ
                            pnlManageBar.disableManageButtons(pnlManageBar.getBtnReload().getName());
                            break;
                        default:
                            throw new AssertionError();
                    }
                } catch (IllegalArgumentException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                } catch (IllegalAccessException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                } catch (SQLException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                } catch (NoSuchFieldException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                }
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnSave().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnSave().setForeground(Color.RED);
                pnlManageBar.getBtnSave().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnSave().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnSave().setForeground(Color.BLACK);
                pnlManageBar.getBtnSave().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });

        pnlManageBar.getBtnSave().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnSave().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnSave().setForeground(Color.RED);
                pnlManageBar.getBtnSave().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

//        Xử lý sự kiện nút undo  
        pnlManageBar.getBtnUndo().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (!undoRedo.getUndoStack().isEmpty()) {
                    ObjectAction objectActionUndo = undoRedo.undo();
                    Object[] row;
                    switch (tabName) {
                        case "Quản lý bộ đề":
                            BoDe question = (BoDe) objectActionUndo.getObjects().get(0);
                            row = new Object[]{
                                question.getCauHoi(), question.getMaMH(), question.getTrinhDo(),
                                question.getNoiDung(), question.getA(), question.getB(), question.getC(),
                                question.getD(), question.getDapAn(), question.getMaGV()
                            };
                            break;

                        default:
                            throw new AssertionError();
                    }

                    objectActionExecute(objectActionUndo, row);

//                    Hiển thị dữ liệu của row vừa undo
                    try {
                        fillObjectInfoForm(objectActionUndo.getObjects().get(0));
                    } catch (SQLException ex) {
                        MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                    }

                    pnlManageBar.disableManageButtons(pnlManageBar.getBtnUndo().getName());

                    if (undoRedo.getUndoStack().isEmpty()) {
                        pnlManageBar.getBtnUndo().setEnabled(false);
                    }
                }
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnUndo().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnUndo().setForeground(Color.RED);
                pnlManageBar.getBtnUndo().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnUndo().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnUndo().setForeground(Color.BLACK);
                pnlManageBar.getBtnUndo().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });

        pnlManageBar.getBtnUndo().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnUndo().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnUndo().setForeground(Color.RED);
                pnlManageBar.getBtnUndo().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

//        Xử lý sự kiện nút redo  
        pnlManageBar.getBtnRedo().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (!undoRedo.getRedoStack().isEmpty()) {
                    ObjectAction objectActionRedo = undoRedo.redo();
                    Object[] row;
                    switch (tabName) {
                        case "Quản lý bộ đề":
                            BoDe question = (BoDe) objectActionRedo.getObjects().get(0);
                            row = new Object[]{
                                question.getCauHoi(), question.getMaMH(), question.getTrinhDo(),
                                question.getNoiDung(), question.getA(), question.getB(), question.getC(),
                                question.getD(), question.getDapAn(), question.getMaGV()
                            };
                            break;
                        default:
                            throw new AssertionError();
                    }

                    objectActionExecute(objectActionRedo, row);

//                    Hiển thị dữ liệu của row vừa redo
                    try {
                        fillObjectInfoForm(objectActionRedo.getObjects().get(0));
                    } catch (SQLException ex) {
                        MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                    }

                    pnlManageBar.disableManageButtons(pnlManageBar.getBtnRedo().getName());

                    if (undoRedo.getRedoStack().isEmpty()) {
                        pnlManageBar.getBtnRedo().setEnabled(false);
                    }
                }
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnRedo().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnRedo().setForeground(Color.RED);
                pnlManageBar.getBtnRedo().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnRedo().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnRedo().setForeground(Color.BLACK);
                pnlManageBar.getBtnRedo().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });

        pnlManageBar.getBtnRedo().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnRedo().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnRedo().setForeground(Color.RED);
                pnlManageBar.getBtnRedo().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

//        Xử lý sự kiện nút reload  
        pnlManageBar.getBtnReload().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
//                Reset dữ liệu của bộ nhớ tạm, undo, redo
                objectActions.clear();
                undoRedo.reset();
                ((DefaultTableModel) tblData.getModel()).setRowCount(0);

//                Load lại dữ liệu
                BoDeController.renderData(frmMain, _this);

//                Reset form nhập liệu
                switch (tabName) {
                    case "Quản lý bộ đề":
                        ((PnlQuestionInfo) pnlObjectInfo).reset();
                        break;
                    default:
                        throw new AssertionError();
                }

//                Reset thanh công cụ
                pnlManageBar.disableManageButtons(pnlManageBar.getBtnReload().getName());
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnReload().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnReload().setForeground(Color.RED);
                pnlManageBar.getBtnReload().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnReload().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnReload().setForeground(Color.BLACK);
                pnlManageBar.getBtnReload().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });

        pnlManageBar.getBtnReload().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnReload().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnReload().setForeground(Color.RED);
                pnlManageBar.getBtnReload().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

//        Xử lý sự kiện nút export file
        pnlManageBar.getBtnExportFile().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                ExportFileChoice exportFileChoice = new ExportFileChoice(frmMain, true, tabName, tblData);
                exportFileChoice.setLocationRelativeTo(null);
                exportFileChoice.setVisible(true);
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnExportFile().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnExportFile().setForeground(Color.RED);
                pnlManageBar.getBtnExportFile().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnExportFile().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnExportFile().setForeground(Color.BLACK);
                pnlManageBar.getBtnExportFile().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });

        pnlManageBar.getBtnExportFile().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnExportFile().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnExportFile().setForeground(Color.RED);
                pnlManageBar.getBtnExportFile().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });
    }

//    Methods
    public void initProperties(FrmMain frmMain, String tabName) {
        this._this = this;
        this.frmMain = frmMain;
        this.tabName = tabName;
        undoRedo = new UndoRedo();
    }

    public void initMyComponents(String tabName) {
        pnlManageBarContainer.add((pnlManageBar = new PnlManageBar()));
        switch (tabName) {
            case "Quản lý bộ đề":
//                Cập nhật thông tin cột dữ liệu
                DefaultTableModel model = new DefaultTableModel();
                String[] columns = {
                    "Id câu hỏi", "Mã môn học", "Trình độ", "Nội dung",
                    "A", "B", "C", "D", "Đáp án", "Giáo viên soạn"
                };
                for (String column : columns) {
                    model.addColumn(column);
                }
                tblData.setModel(model);

//                Thêm form thao tác nhập liệu tương ứng
                pnlDataEntryFormContainer.add((pnlObjectInfo = new PnlQuestionInfo()));
                break;

        }
    }

    public void disableComponents(String groupName) {
        switch (groupName) {
            case "TRUONG":
                pnlManageBar.getBtnAdd().setEnabled(false);
                pnlManageBar.getBtnUpdate().setEnabled(false);
                pnlManageBar.getBtnDelete().setEnabled(false);
                pnlManageBar.getBtnSave().setEnabled(false);
                pnlManageBar.getBtnUndo().setEnabled(false);
                break;
            default:
                cboSide.setEnabled(false);
        }
    }

    public void fillSideComboBox(String groupName) throws IOException {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        switch (groupName) {
            case "TRUONG":
                model.addAll(new SubscriberService().getActiveSubcribers(SubscribersVariables.subscribers));
                break;
            default:
                model.addElement(LoginVariables.databaseConnector.getAccount().getSubscriber());
        }
        cboSide.setModel(model);
    }

    public void fillDataTable(List<ObjectAction> objectActions) {
        DefaultTableModel dataModel = (DefaultTableModel) tblData.getModel();
        dataModel.setRowCount(0);
        switch (tabName) {
            case "Quản lý bộ đề":
                for (ObjectAction objectAction : objectActions) {
                    List<String> row = new ArrayList<>();
                    row.add(String.valueOf(((BoDe) objectAction.getObjects().get(0)).getCauHoi()));
                    row.add(((BoDe) objectAction.getObjects().get(0)).getMaMH());
                    row.add(((BoDe) objectAction.getObjects().get(0)).getTrinhDo());
                    row.add(((BoDe) objectAction.getObjects().get(0)).getNoiDung());
                    row.add(((BoDe) objectAction.getObjects().get(0)).getA());
                    row.add(((BoDe) objectAction.getObjects().get(0)).getB());
                    row.add(((BoDe) objectAction.getObjects().get(0)).getC());
                    row.add(((BoDe) objectAction.getObjects().get(0)).getD());
                    row.add(((BoDe) objectAction.getObjects().get(0)).getDapAn());
                    row.add(((BoDe) objectAction.getObjects().get(0)).getMaGV());
                    dataModel.addRow(row.toArray());
                }
                break;
            default:
                throw new AssertionError();
        }
    }

    public void fillObjectInfoForm(Object object) throws SQLException {
        switch (tabName) {
            case "Quản lý bộ đề":
                PnlQuestionInfo pnlQuestionInfo = (PnlQuestionInfo) pnlObjectInfo;
                BoDe question = (BoDe) object;
                pnlQuestionInfo.getTxtQuestionId().setText(String.valueOf(question.getCauHoi()));
                pnlQuestionInfo.setSelectedSubjectItem(question.getMaMH());
                pnlQuestionInfo.getCboLevel().setSelectedItem(question.getTrinhDo());
                pnlQuestionInfo.getTxtAreaContent().setText(question.getNoiDung());
                pnlQuestionInfo.getTxtAreaQuestionA().setText(question.getA());
                pnlQuestionInfo.getTxtAreaQuestionB().setText(question.getB());
                pnlQuestionInfo.getTxtAreaQuestionC().setText(question.getC());
                pnlQuestionInfo.getTxtAreaQuestionD().setText(question.getD());
                pnlQuestionInfo.getCboAnswer().setSelectedItem(question.getDapAn());
                GiaoVien teacher = new GiaoVienService().getTeacher(question.getMaGV());
                if (teacher != null) {
                    pnlQuestionInfo.getTxtTeacherInfo().setText(teacher.toString());
                } else {
                    pnlQuestionInfo.getTxtTeacherInfo().setText(question.getMaGV());
                }
                break;
            default:
                throw new AssertionError();
        }
    }

    public Object getObjectFromRow(int rowIndex) {
        Object object;
        TableModel model = tblData.getModel();
        switch (tabName) {
            case "Quản lý bộ đề":
                object = new BoDe(
                        Integer.parseInt(model.getValueAt(rowIndex, 0).toString()),
                        model.getValueAt(rowIndex, 1).toString(),
                        model.getValueAt(rowIndex, 2).toString(),
                        model.getValueAt(rowIndex, 3).toString(),
                        model.getValueAt(rowIndex, 4).toString(),
                        model.getValueAt(rowIndex, 5).toString(),
                        model.getValueAt(rowIndex, 6).toString(),
                        model.getValueAt(rowIndex, 7).toString(),
                        model.getValueAt(rowIndex, 8).toString(),
                        model.getValueAt(rowIndex, 9).toString()
                );
                break;
            default:
                object = null;
        }
        return object;
    }

//    Getters and setters
    public String getTabName() {
        return tabName;
    }

    public void setTabName(String tabName) {
        this.tabName = tabName;
    }

    public PnlManageBar getPnlManageBar() {
        return pnlManageBar;
    }

    public void setPnlManageBar(PnlManageBar pnlManageBar) {
        this.pnlManageBar = pnlManageBar;
    }

    public List<ObjectAction> getObjectActions() {
        return objectActions;
    }

    public void setObjectActions(List<Object> objects) {
        objectActions = new ArrayList<>();
        for (int i = 0; i < objects.size(); ++i) {
            objectActions.add(new ObjectAction(i, objects.get(i)));
        }
    }

    public UndoRedo getUndoRedo() {
        return undoRedo;
    }

    public void setUndoRedo(UndoRedo undoRedo) {
        this.undoRedo = undoRedo;
    }

    public JPanel getPnlObjectInfo() {
        return pnlObjectInfo;
    }

    public void setPnlObjectInfo(JPanel pnlObjectInfo) {
        this.pnlObjectInfo = pnlObjectInfo;
    }

    public JComboBox<String> getCboSide() {
        return cboSide;
    }

    public void setCboSide(JComboBox<String> cboSide) {
        this.cboSide = cboSide;
    }

    public JTable getTblData() {
        return tblData;
    }

    public void setTblData(JTable tblData) {
        this.tblData = tblData;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboSide;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlDataEntryFormContainer;
    private javax.swing.JPanel pnlManageBarContainer;
    private javax.swing.JTable tblData;
    // End of variables declaration//GEN-END:variables
}
