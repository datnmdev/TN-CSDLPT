/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.ptithcm.tn_csdlpt.view;

import com.microsoft.sqlserver.jdbc.SQLServerException;
import com.ptithcm.tn_csdlpt.controller.BoDeController;
import com.ptithcm.tn_csdlpt.controller.GiangVienController;
import com.ptithcm.tn_csdlpt.controller.KhoaController;
import com.ptithcm.tn_csdlpt.controller.LopController;
import com.ptithcm.tn_csdlpt.controller.MonHocController;
import com.ptithcm.tn_csdlpt.controller.SinhVienController;
import com.ptithcm.tn_csdlpt.exception.InvalidInputException;
import com.ptithcm.tn_csdlpt.global_variable.LoginVariables;
import com.ptithcm.tn_csdlpt.model.dto.Account;
import com.ptithcm.tn_csdlpt.service.ValidateFormService;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Hashtable;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.swing.JRViewer;
import net.sf.jasperreports.view.JasperViewer;

/**
 *
 * @author MINHDAT
 */
public class FrmMain extends javax.swing.JFrame {

    private FrmMain _this = this;
    private PnlMenu pnlMenu;
    private CustomTabbedPane tabbedPaneWorkspace;
    private PnlStatusBar pnlStatusBar;
    private PnlKhoaManager pnlKhoaManager;
    private String makh;
    private String magv;

    /**
     * Creates new form FrmMain
     */
    public FrmMain(Account account) {
        initComponents();
        initMyComponents();
        hideComponent(account.getGroupName());
        updateStatusBarData(account);
        try {
            addEvents();
        } catch (ParseException ex) {
            Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMenuContainer = new javax.swing.JPanel();
        pnlWorkspaceContainer = new javax.swing.JPanel();
        pnlStatusbarContainer = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Thi trắc nghiệm");
        setExtendedState(JFrame.MAXIMIZED_BOTH);
        setPreferredSize(new java.awt.Dimension(800, 600));

        pnlMenuContainer.setLayout(new java.awt.CardLayout());
        getContentPane().add(pnlMenuContainer, java.awt.BorderLayout.NORTH);

        pnlWorkspaceContainer.setLayout(new java.awt.CardLayout());
        getContentPane().add(pnlWorkspaceContainer, java.awt.BorderLayout.CENTER);

        pnlStatusbarContainer.setLayout(new java.awt.CardLayout());
        getContentPane().add(pnlStatusbarContainer, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

//    Methods
    public void addEvents() throws ParseException {
        pnlMenu.getBtnQuestionManage().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                String tabName = pnlMenu.getBtnQuestionManage().getName();
                int tabIndex = tabbedPaneWorkspace.indexOfTab(tabName);
                if (tabIndex != -1) {
                    tabbedPaneWorkspace.setSelectedIndex(tabIndex);
                } else {
                    try {
                        PnlWorkSection pnlWorkSection = new PnlWorkSection(_this, tabName, LoginVariables.databaseConnector.getAccount().getGroupName());
                        tabbedPaneWorkspace.addTab(tabName, pnlWorkSection);
                        tabbedPaneWorkspace.setTitleAt(tabbedPaneWorkspace.getTabCount() - 1, tabName);
                        BoDeController.renderData(_this, pnlWorkSection);
                    } catch (IOException ex) {
                        MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                    }
                }
            }
        });

        pnlMenu.getBtnTeacherManage().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                String tabName = pnlMenu.getBtnTeacherManage().getName();
                int tabIndex = tabbedPaneWorkspace.indexOfTab(tabName);
                if (tabIndex != -1) {
                    tabbedPaneWorkspace.setSelectedIndex(tabIndex);
                } else {
                    try {
                        PnlTeacherManager pnlWorkSection = new PnlTeacherManager(_this, tabName, LoginVariables.databaseConnector.getAccount().getGroupName());

                        //hàm này dùng để bấm nút tạo tap quản lý tài khoản 
                        pnlWorkSection.getPnlTeacherInfo().getBtnControlLogin().addMouseListener(new MouseAdapter() {
                            public void mouseClicked(MouseEvent e) {
                                String tabName1 = "Tài khoản của " + magv;
                                int tabIndex1 = tabbedPaneWorkspace.indexOfTab(tabName1);
                                if (tabIndex1 != -1) {
                                    tabbedPaneWorkspace.setSelectedIndex(tabIndex1);
                                } else {
                                    try {
                                       
                                        
                                        System.out.println(LoginVariables.databaseConnector.getAccount().getGroupName().strip());
                                        
                                        if (LoginVariables.databaseConnector.getAccount().getGroupName().strip().equals("COSO")) {
                                            System.out.println("   vô được day ànkjsdn       234234");
                                            PnlCreateLoginCoSo pnlLoginManager = new PnlCreateLoginCoSo(magv);
                                            tabbedPaneWorkspace.addTab(tabName1, pnlLoginManager);
                                            tabbedPaneWorkspace.setTitleAt(tabbedPaneWorkspace.getTabCount() - 1, tabName1);
                                        } else if (LoginVariables.databaseConnector.getAccount().getGroupName().strip().equals("TRUONG")) {
                                            PnlCreateLoginTruong pnlLoginManager = new PnlCreateLoginTruong(magv);
                                            tabbedPaneWorkspace.addTab(tabName1, pnlLoginManager);
                                            tabbedPaneWorkspace.setTitleAt(tabbedPaneWorkspace.getTabCount() - 1, tabName1);

                                        }

                                    } catch (SQLException ex) {
                                        Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                                    }

                                }
                            }
                        });

                        tabbedPaneWorkspace.addTab(tabName, pnlWorkSection);
                        tabbedPaneWorkspace.setTitleAt(tabbedPaneWorkspace.getTabCount() - 1, tabName);
                        GiangVienController.renderData(pnlWorkSection);
                    } catch (IOException ex) {
                        MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                    } catch (SQLException ex) {
                        Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });

        pnlMenu.getBtnStudentManage().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                String tabName = pnlMenu.getBtnStudentManage().getName();
                System.out.println(tabName);
                int tabIndex = tabbedPaneWorkspace.indexOfTab(tabName);
                if (tabIndex != -1) {
                    tabbedPaneWorkspace.setSelectedIndex(tabIndex);
                } else {
                    try {
                        PnlStudentManager pnlWorkSection = new PnlStudentManager(tabName, LoginVariables.databaseConnector.getAccount().getGroupName());
                        tabbedPaneWorkspace.addTab(tabName, pnlWorkSection);
                        tabbedPaneWorkspace.setTitleAt(tabbedPaneWorkspace.getTabCount() - 1, tabName);
                        SinhVienController.renderData(pnlWorkSection);
                    } catch (IOException ex) {
                        MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                    } catch (SQLException ex) {
                        Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });

        pnlMenu.getBtnSubjectManage().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                String tabName = pnlMenu.getBtnSubjectManage().getName();
                System.out.println(tabName);
                int tabIndex = tabbedPaneWorkspace.indexOfTab(tabName);
                if (tabIndex != -1) {
                    tabbedPaneWorkspace.setSelectedIndex(tabIndex);
                } else {
                    try {
                        PnlMonHocManager pnlWorkSection = new PnlMonHocManager(tabName, LoginVariables.databaseConnector.getAccount().getGroupName());
                        tabbedPaneWorkspace.addTab(tabName, pnlWorkSection);
                        tabbedPaneWorkspace.setTitleAt(tabbedPaneWorkspace.getTabCount() - 1, tabName);
                        MonHocController.renderData(pnlWorkSection);
                    } catch (IOException ex) {
                        MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                    } catch (SQLException ex) {
                        Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });

        pnlMenu.getBtnClassroomManage().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                String tabName = pnlMenu.getBtnClassroomManage().getName();
                int tabIndex = tabbedPaneWorkspace.indexOfTab(tabName);
                if (tabIndex != -1) {
                    tabbedPaneWorkspace.setSelectedIndex(tabIndex);
                } else {
                    try {
                        pnlKhoaManager = new PnlKhoaManager(_this, tabName, LoginVariables.databaseConnector.getAccount().getGroupName());

                        //hàm này dùng để bấm nút tạo tap quản lý lớp
                        pnlKhoaManager.getPnlKhoaInfo().getBtnKhoaManager().addMouseListener(new MouseAdapter() {
                            public void mouseClicked(MouseEvent e) {
                                String tabName = "Quản lý lớp thuộc khoa " + makh;
                                int tabIndex = tabbedPaneWorkspace.indexOfTab(tabName);
                                if (tabIndex != -1) {
                                    tabbedPaneWorkspace.setSelectedIndex(tabIndex);
                                } else {
                                    try {
                                        PnlLopManager pnlLopManager = new PnlLopManager(tabName, LoginVariables.databaseConnector.getAccount().getGroupName(), makh);
                                        tabbedPaneWorkspace.addTab(tabName, pnlLopManager);
                                        tabbedPaneWorkspace.setTitleAt(tabbedPaneWorkspace.getTabCount() - 1, tabName);
                                        LopController.renderData(pnlLopManager, makh);
                                    } catch (SQLException ex) {
                                        Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                                    } catch (IOException ex) {
                                        Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }
                        });

                        tabbedPaneWorkspace.addTab(tabName, pnlKhoaManager);
                        tabbedPaneWorkspace.setTitleAt(tabbedPaneWorkspace.getTabCount() - 1, tabName);
                        KhoaController.renderData(pnlKhoaManager);
                    } catch (IOException ex) {
                        MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                    } catch (SQLException ex) {
                        Logger.getLogger(FrmMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        });

        pnlMenu.getBtnReportExamCalendar().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                String tabName = pnlMenu.getBtnReportExamCalendar().getName();
                int tabIndex = tabbedPaneWorkspace.indexOfTab(tabName);
                if (tabIndex != -1) {
                    tabbedPaneWorkspace.setSelectedIndex(tabIndex);
                } else {

                    PnlReportDangKiThi pnlWorkSection = new PnlReportDangKiThi();
                    tabbedPaneWorkspace.addTab(tabName, pnlWorkSection);
                    tabbedPaneWorkspace.setTitleAt(tabbedPaneWorkspace.getTabCount() - 1, tabName);

                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
                    SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd/MM/yyyy");

                    //hàm này dùng để khi nhấn vô nút in báo cáo thì nó sẽ vào hàm này
                    pnlWorkSection.getBtnPrint().addMouseListener(new MouseAdapter() {
                        public void mouseClicked(MouseEvent e) {
                            try {

                                ValidateFormService.validateFrmReportBaoCaoDangKi(pnlWorkSection.getTxtFromDate(), pnlWorkSection.getTxtEndDate());

                                Hashtable map = new Hashtable();
                                JasperReport rpt = JasperCompileManager.compileReport("C:\\Users\\HP\\Desktop\\TN-CSDLPT\\src\\main\\java\\com\\ptithcm\\tn_csdlpt\\view\\ReportBaoCaoDangKiThi.jrxml");

                                Date fromDate = pnlWorkSection.getTxtFromDate().getDate();
                                String fromDateStr = dateFormat.format(fromDate);
                                String fromDateStr1 = dateFormat1.format(fromDate);

                                Date endDate = pnlWorkSection.getTxtEndDate().getDate();
                                String endDateStr = dateFormat.format(endDate);
                                String endDateStr1 = dateFormat1.format(endDate);

                                //gắn tham số
                                map.put("endDate", endDateStr);
                                map.put("fromDate", fromDateStr);
                                map.put("titleCS1", "DANH SÁCH ĐĂNG KÝ THI TRẮC NGHIỆM CƠ SỞ 1\n"
                                        + "TỪ NGÀY " + fromDateStr1 + " ĐẾN NGÀY " + endDateStr1);
                                map.put("titleCS2", "DANH SÁCH ĐĂNG KÝ THI TRẮC NGHIỆM CƠ SỞ 2\n"
                                        + "TỪ NGÀY " + fromDateStr1 + " ĐẾN NGÀY " + endDateStr1);

                                Connection connection = LoginVariables.databaseConnector.getConnection();

                                //ánh xạ tham số và kết nối
                                JasperPrint p = JasperFillManager.fillReport(rpt, map, connection);

                                //gắn vào jpanel
                                JRViewer v = new JRViewer(p);
                                pnlWorkSection.getMainReport().add(v);

                            } catch (JRException ex) {
                                MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                            } catch (SQLServerException ex) {
                                MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                            } catch (SQLException ex) {
                                MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                            } catch (InvalidInputException ex) {
                                MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                            }

                        }
                    });

                }
            }
        });

    }

    public void initMyComponents() {
//        Khởi tạo các component
        pnlMenu = new PnlMenu();
        tabbedPaneWorkspace = new CustomTabbedPane();
        pnlStatusBar = new PnlStatusBar();

//        Thêm các component vừa tạo vào các vùng chứa
        pnlMenuContainer.add(pnlMenu);
        pnlWorkspaceContainer.add(tabbedPaneWorkspace);
        pnlStatusbarContainer.add(pnlStatusBar);
    }

    //    Ẩn và hiện các chức năng ứng với các nhóm quyền tương ứng
    public void hideComponent(String groupName) {
        switch (groupName) {
            case "SINHVIEN":
                pnlMenu.getTabManager().removeTabAt(1);
                pnlMenu.getBtnExamCalendarRegister().setVisible(false);
                pnlMenu.getTabManager().removeTabAt(2);
                break;
            case "GIANGVIEN":
                pnlMenu.getBtnTeacherManage().setVisible(false);
                pnlMenu.getBtnStudentManage().setVisible(false);
                pnlMenu.getBtnClassroomManage().setVisible(false);
                pnlMenu.getBtnSubjectManage().setVisible(false);
                pnlMenu.getBtnReportExamCalendar().setVisible(false);
                break;
            case "TRUONG":
                pnlMenu.getBtnExamCalendarRegister().setVisible(false);
                pnlMenu.getBtnDoExam().setVisible(false);
                break;
            case "COSO":
                pnlMenu.getBtnExamCalendarRegister().setVisible(false);
                pnlMenu.getBtnDoExam().setVisible(false);
                break;
        }
    }

//    Cập nhật thông tin cho thanh trạng thái khi đăng nhập thành công
    public void updateStatusBarData(Account account) {
        pnlStatusBar.getLblUsername().setText(account.getUsername());
        pnlStatusBar.getLblFullName().setText(account.getFullName());
        pnlStatusBar.getLblGroupName().setText(account.getGroupName());
        new Thread() {
            @Override
            public void run() {
                while (true) {
                    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss");
                    String formattedDateTime = simpleDateFormat.format(new Date());
                    pnlStatusBar.getLblNowDateTime().setText(formattedDateTime);
                    try {
                        sleep(1);
                    } catch (InterruptedException ex) {
                        MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                        interrupt();
                    }
                }
            }
        }.start();
    }

//    Getters and setters
    public PnlMenu getPnlMenu() {
        return pnlMenu;
    }

    public void setPnlMenu(PnlMenu pnlMenu) {
        this.pnlMenu = pnlMenu;
    }

    public CustomTabbedPane getTabbedPaneWorkspace() {
        return tabbedPaneWorkspace;
    }

    public void setTabbedPaneWorkspace(CustomTabbedPane tabbedPaneWorkspace) {
        this.tabbedPaneWorkspace = tabbedPaneWorkspace;
    }

    public PnlStatusBar getPnlStatusBar() {
        return pnlStatusBar;
    }

    public void setPnlStatusBar(PnlStatusBar pnlStatusBar) {
        this.pnlStatusBar = pnlStatusBar;
    }

    public String getMakh() {
        return makh;
    }

    public void setMakh(String makh) {
        this.makh = makh;
    }

    public String getMagv() {
        return magv;
    }

    public void setMagv(String magv) {
        this.magv = magv;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel pnlMenuContainer;
    private javax.swing.JPanel pnlStatusbarContainer;
    private javax.swing.JPanel pnlWorkspaceContainer;
    // End of variables declaration//GEN-END:variables
}
