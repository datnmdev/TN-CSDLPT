/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package com.ptithcm.tn_csdlpt.view;

import com.ptithcm.tn_csdlpt.controller.BoDeController;
import com.ptithcm.tn_csdlpt.controller.GiangVienController;
import com.ptithcm.tn_csdlpt.entity.GiaoVien;
import com.ptithcm.tn_csdlpt.entity.Khoa;
import com.ptithcm.tn_csdlpt.exception.InvalidInputException;
import com.ptithcm.tn_csdlpt.global_variable.LoginVariables;
import com.ptithcm.tn_csdlpt.global_variable.SubscribersVariables;
import com.ptithcm.tn_csdlpt.model.dto.ActionStatusEnum;
import static com.ptithcm.tn_csdlpt.model.dto.ActionStatusEnum.DELETE;
import static com.ptithcm.tn_csdlpt.model.dto.ActionStatusEnum.INSERT;
import static com.ptithcm.tn_csdlpt.model.dto.ActionStatusEnum.UPDATE;
import com.ptithcm.tn_csdlpt.model.dto.GiaoVienDto;
import com.ptithcm.tn_csdlpt.model.dto.ObjectAction;
import com.ptithcm.tn_csdlpt.repository.CreateLoginRepository;
import com.ptithcm.tn_csdlpt.repository.GiaoVienRepository;
import com.ptithcm.tn_csdlpt.service.GiaoVienService;
import com.ptithcm.tn_csdlpt.service.SubscriberService;
import com.ptithcm.tn_csdlpt.service.UndoRedo;
import com.ptithcm.tn_csdlpt.service.ValidateFormService;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Rectangle;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseMotionAdapter;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author MINHDAT
 */
public class PnlTeacherManager extends javax.swing.JPanel {

    private List<GiaoVienDto> teachersDto;
    private PnlManageBar pnlManageBar;
    private PnlTeacherInfo pnlTeacherInfo;

    private FrmMain frmMain;
    private String tabName;
    private String magv;

    //dùng để kiểm tra xem các giáo viên thuộc nhóm quyền của tài khoản hiện tại
    List<String> stringList = new ArrayList<String>();

    //dùng để kiểm tra xem các giáo viên có tài khoản hay chưa
    List<String> stringList1 = new ArrayList<String>();

    private List<ObjectAction> objectActions = new ArrayList<>();
    private UndoRedo undoRedo = new UndoRedo();
    private JPanel pnlObjectInfo;

    /**
     * Creates new form pnlWorkSection
     */
    public PnlTeacherManager(FrmMain frmMain, String tabName, String groupName) throws IOException {
        initComponents();
        initMyComponents(tabName, frmMain);
        disableComponents(groupName);
        fillSideComboBox(groupName);
        addEvents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlManageBarContainer = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        cboSide = new javax.swing.JComboBox<>();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblData = new javax.swing.JTable();
        pnlDataEntryFormContainer = new javax.swing.JPanel();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());

        pnlManageBarContainer.setOpaque(false);
        pnlManageBarContainer.setLayout(new java.awt.CardLayout());
        add(pnlManageBarContainer, java.awt.BorderLayout.NORTH);

        jPanel2.setOpaque(false);
        jPanel2.setLayout(new java.awt.CardLayout(5, 5));

        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.BorderLayout());

        jPanel4.setOpaque(false);
        jPanel4.setLayout(new java.awt.BorderLayout(0, 5));

        jPanel6.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        cboSide.setMinimumSize(new java.awt.Dimension(200, 40));
        cboSide.setPreferredSize(new java.awt.Dimension(200, 30));
        jPanel6.add(cboSide);

        jPanel4.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel7.setOpaque(false);
        jPanel7.setLayout(new java.awt.CardLayout());

        tblData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã Giảng Viên", "Họ", "Tên", "Địa Chỉ", "Khoa"
            }
        ));
        jScrollPane1.setViewportView(tblData);

        jPanel7.add(jScrollPane1, "card2");

        jPanel4.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel3.add(jPanel4, java.awt.BorderLayout.CENTER);

        pnlDataEntryFormContainer.setLayout(new java.awt.CardLayout());
        jPanel3.add(pnlDataEntryFormContainer, java.awt.BorderLayout.EAST);

        jPanel2.add(jPanel3, "card2");

        add(jPanel2, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

//    Sự kiện con cuộn bảng
    public void scrollRectToVisible(int index) {
        Rectangle cellRect = tblData.getCellRect(index, 0, true);
        Rectangle visibleRect = tblData.getVisibleRect();
        visibleRect.y = cellRect.y;
        visibleRect.height = cellRect.height;
        tblData.scrollRectToVisible(visibleRect);;
    }

//Thực thi các thao tác với các đối tượng được đưa vào undo, redo
    public void objectActionExecute(ObjectAction objectAction, Object[] row) {
        DefaultTableModel tblDataModel = (DefaultTableModel) tblData.getModel();
        switch (objectAction.getStatus().get(0)) {
            case INSERT:
//                        Cập nhật dữ liệu bộ nhớ tạm
                objectActions.get(objectAction.getListIndex()).getStatus().add(ActionStatusEnum.INSERT);

//                        Cập nhật dữ liệu bảng
                tblDataModel.insertRow(objectAction.getTableIndex(), row);
                tblDataModel.fireTableDataChanged();
                scrollRectToVisible(objectAction.getTableIndex());
                tblData.setRowSelectionInterval(objectAction.getTableIndex(), objectAction.getTableIndex());
                break;
            case UPDATE:
//                Cập nhật lại dữ liệu cho bộ nhớ tạm
                objectActions.get(objectAction.getListIndex()).getStatus().add(ActionStatusEnum.UPDATE);
                List<Object> objects = new ArrayList<>();
                objects.add(objectAction.getObjects().get(0));
                objectActions.get(objectAction.getListIndex()).setObjects(objects);

//                        Cập nhật dữ liệu bảng
                for (int i = 0; i < tblDataModel.getColumnCount(); ++i) {
                    tblDataModel.setValueAt(row[i], objectAction.getTableIndex(), i);
                }
                tblDataModel.fireTableRowsUpdated(objectAction.getTableIndex(), objectAction.getTableIndex());
                scrollRectToVisible(objectAction.getTableIndex());
                tblData.setRowSelectionInterval(objectAction.getTableIndex(), objectAction.getTableIndex());

                break;
            case DELETE:
//                        Cập nhật dữ liệu bộ nhớ tạm
                objectActions.get(objectAction.getListIndex()).getStatus().add(ActionStatusEnum.DELETE);

//                        Cập nhật dữ liệu bảng
                tblDataModel.removeRow(objectAction.getTableIndex());
                tblDataModel.fireTableDataChanged();
                break;
        }
    }

//hàm này dùng để chuyển sự kiện    
    public void addEvents() {

        //khi mình chọn một dòng trong bảng dữ liệu thì nó sẽ lấy một mẫu dữ liệu  sfasdfasdfasdfsdfasfaslkflna;slkndf
        tblData.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                int selectedRow = tblData.getSelectedRow();
                Object teacher = (GiaoVien) getObjectFromRow(selectedRow);
                fillTeacherField(teacher);
            }
        }
        );

        pnlManageBar.getBtnAdd().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                try {
                    //validate form

                    ValidateFormService.validateFrmTeacherInfoAdd(pnlTeacherInfo, objectActions);

//hàm thực thi chương trình
                    Khoa selectedKhoa = (Khoa) pnlTeacherInfo.getComboboxKhoa().getSelectedItem();
                    GiaoVien teacher = new GiaoVien(pnlTeacherInfo.getTxtTeacherID().getText(), pnlTeacherInfo.getTxtHo().getText(), pnlTeacherInfo.getTxtTen().getText(), pnlTeacherInfo.getTxtDiaChi().getText(), selectedKhoa.getMaKH());
                    int objectActionSize = objectActions.size();
                    DefaultTableModel tblDataModel = (DefaultTableModel) tblData.getModel();
                    ObjectAction objectAction = new ObjectAction(
                            ActionStatusEnum.INSERT, objectActionSize,
                            tblDataModel.getRowCount(), teacher
                    );
                    //                        Thêm đối tượng vào objectActions
                    objectActions.add(objectAction);
                    //                        Cập nhật lại bảng
                    Object[] row = {teacher.getMaGV(), teacher.getHo(), teacher.getTen(), teacher.getDiaChi(), teacher.getMaKH()};
                    tblDataModel.addRow(row);
                    tblDataModel.fireTableDataChanged();
                    scrollRectToVisible(tblDataModel.getRowCount() - 1);
                    tblData.setRowSelectionInterval(tblDataModel.getRowCount() - 1, tblDataModel.getRowCount() - 1);
                    delectTeacherField();
                    //Lưu thao tác thực hiện vào stack
                    undoRedo.execute(objectAction, objectActions);
                    //Ẩn/hiện các chức năng khác
                    pnlManageBar.disableManageButtons(pnlManageBar.getBtnAdd().getName());
                } catch (InvalidInputException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                } catch (SQLException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                }

            }

            //hàm này dùng để khi con chuột lướt qua hay không
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnAdd().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnAdd().setForeground(Color.RED);
                pnlManageBar.getBtnAdd().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            //hàm này tạo hiệu ứng khi con chuột lướt qua
            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnAdd().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnAdd().setForeground(Color.BLACK);
                pnlManageBar.getBtnAdd().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }

        });

        //hàm này dùng để khi di chuột qua nó sẽ tô màu lên
        pnlManageBar.getBtnAdd().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnAdd().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnAdd().setForeground(Color.RED);
                pnlManageBar.getBtnAdd().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

        //Xử lý sự kiện nút update  
        pnlManageBar.getBtnUpdate().addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {

                try {
                    //hàm này dùng để bắt lỗi
                    ValidateFormService.validateFrmTeacherInfoUpdate(pnlTeacherInfo, magv);

                    //thục thi các câu lệnh
                    Khoa selectedKhoa = (Khoa) pnlTeacherInfo.getComboboxKhoa().getSelectedItem();

                    GiaoVien teacher = new GiaoVien(pnlTeacherInfo.getTxtTeacherID().getText(), pnlTeacherInfo.getTxtHo().getText(), pnlTeacherInfo.getTxtTen().getText(), pnlTeacherInfo.getTxtDiaChi().getText(), selectedKhoa.getMaKH());

                    int objectActionIndex = -1;
                    for (int i = 0; i < objectActions.size(); ++i) {
                        GiaoVien gv = (GiaoVien) objectActions.get(i).getObjects().get(0);
                        if (magv.strip().equals(gv.getMaGV().strip())) {
                            objectActionIndex = i;
                            break;
                        }
                    }

                    if (objectActionIndex != -1) {
                        int selectedRowIndex = tblData.getSelectedRow();
                        ObjectAction objectAction = new ObjectAction(
                                ActionStatusEnum.UPDATE,
                                objectActionIndex, selectedRowIndex,
                                (GiaoVien) objectActions.get(objectActionIndex).getObjects().get(0)
                        );

//                        Cập nhật dữ liệu của đối tượng BoDe trong bộ nhớ tạm
                        objectActions.get(objectActionIndex).getStatus().add(ActionStatusEnum.UPDATE);
                        List<Object> objects = new ArrayList<>();
                        objects.add(teacher);
                        objectActions.get(objectActionIndex).setObjects(objects);

//                        Cập nhật dữ liệu cho bảng
                        DefaultTableModel tblDataModel = (DefaultTableModel) tblData.getModel();
                        Object[] row = {
                            teacher.getMaGV(), teacher.getHo(), teacher.getTen(),
                            teacher.getDiaChi(), teacher.getMaKH()};

                        for (int i = 0; i < tblDataModel.getColumnCount(); ++i) {
                            tblDataModel.setValueAt(row[i], selectedRowIndex, i);
                        }
                        tblDataModel.fireTableRowsUpdated(selectedRowIndex, selectedRowIndex);
                        scrollRectToVisible(selectedRowIndex);
                        tblData.setRowSelectionInterval(selectedRowIndex, selectedRowIndex);

//                        Lưu thay đổi vào stack
                        undoRedo.execute(objectAction, objectActions);

//                        Ẩn/hiện các nút chức năng
                        pnlManageBar.disableManageButtons(pnlManageBar.getBtnUpdate().getName());

                    }
                } catch (SQLException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                } catch (InvalidInputException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                }

            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnUpdate().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnUpdate().setForeground(Color.RED);
                pnlManageBar.getBtnUpdate().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnUpdate().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnUpdate().setForeground(Color.BLACK);
                pnlManageBar.getBtnUpdate().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }

        }
        );

        pnlManageBar.getBtnUpdate().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnUpdate().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnUpdate().setForeground(Color.RED);
                pnlManageBar.getBtnUpdate().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

//        Xử lý sự kiện nút delete        
        pnlManageBar.getBtnDelete().addMouseListener(new MouseAdapter() {

            public void mouseClicked(MouseEvent e) {

                Khoa selectedKhoa = (Khoa) pnlTeacherInfo.getComboboxKhoa().getSelectedItem();

                GiaoVien teacher = new GiaoVien(pnlTeacherInfo.getTxtTeacherID().getText(), pnlTeacherInfo.getTxtHo().getText(), pnlTeacherInfo.getTxtTen().getText(), pnlTeacherInfo.getTxtDiaChi().getText(), selectedKhoa.getMaKH());

                int objectActionIndex = -1;
                for (int i = 0; i < objectActions.size(); ++i) {
                    GiaoVien gv = (GiaoVien) objectActions.get(i).getObjects().get(0);
                    if (magv.strip().equals(gv.getMaGV().strip())) {
                        objectActionIndex = i;
                        break;
                    }
                }

                if (objectActionIndex != -1) {
                    int selectedRowIndex = tblData.getSelectedRow();
                    ObjectAction objectAction = new ObjectAction(
                            ActionStatusEnum.DELETE,
                            objectActionIndex, selectedRowIndex, teacher
                    );

//                        Chuyển đối trạng thái thao tác với đối tượng BoDe trong bộ nhớ tạm
                    objectActions.get(objectActionIndex).getStatus().add(ActionStatusEnum.DELETE);

//                        Cập nhật dữ liệu cho bảng
                    DefaultTableModel tblDataModel = (DefaultTableModel) tblData.getModel();
                    tblDataModel.removeRow(selectedRowIndex);
                    tblDataModel.fireTableDataChanged();

//                        Lưu thay đổi vào stack
                    undoRedo.execute(objectAction, objectActions);

//                        Ẩn/hiện các nút chức năng
                    pnlManageBar.disableManageButtons(pnlManageBar.getBtnDelete().getName());
                }
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnDelete().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnDelete().setForeground(Color.RED);
                pnlManageBar.getBtnDelete().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnDelete().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnDelete().setForeground(Color.BLACK);
                pnlManageBar.getBtnDelete().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }

        }
        );

        pnlManageBar.getBtnDelete().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnDelete().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnDelete().setForeground(Color.RED);
                pnlManageBar.getBtnDelete().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

//        Xử lý sự kiện nút save      
        pnlManageBar.getBtnSave().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {

                try {
//                            Gọi lệnh save từ tầng service
                    GiaoVienService.saveAll(objectActions);

//                            Hiển thị hộp thoại thông báo khi nó ghi thành công
                    MessageBox.showConfirmSuccessBox("Thông báo", "Ghi thành công!");

//                            Tiến hành load lại trang sau khi ghi thành công
                    //  Reset dữ liệu của bộ nhớ tạm, undo, redo
                    objectActions.clear();
                    undoRedo.reset();
                    ((DefaultTableModel) tblData.getModel()).setRowCount(0);

                    //  Load lại dữ liệu
                    GiangVienController.renderData(PnlTeacherManager.this);

                    //  Reset form nhập liệu
                    delectTeacherField();

                    //  Reset thanh công cụ
                    pnlManageBar.disableManageButtons(pnlManageBar.getBtnReload().getName());

                } catch (IllegalArgumentException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                } catch (IllegalAccessException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                } catch (SQLException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                } catch (NoSuchFieldException ex) {
                    MessageBox.showErrorBox(ex.getClass().getName(), ex.getMessage());
                }

            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnSave().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnSave().setForeground(Color.RED);
                pnlManageBar.getBtnSave().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnSave().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnSave().setForeground(Color.BLACK);
                pnlManageBar.getBtnSave().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });

        pnlManageBar.getBtnSave().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnSave().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnSave().setForeground(Color.RED);
                pnlManageBar.getBtnSave().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

//        Xử lý sự kiện nút undo  
        pnlManageBar.getBtnUndo().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (!undoRedo.getUndoStack().isEmpty()) {
                    ObjectAction objectActionUndo = undoRedo.undo();
                    GiaoVien teacher = (GiaoVien) objectActionUndo.getObjects().get(0);
                    Object[] row = {
                        teacher.getMaGV(), teacher.getHo(), teacher.getTen(),
                        teacher.getDiaChi(), teacher.getMaKH()};
                    objectActionExecute(objectActionUndo, row);

                    pnlManageBar.disableManageButtons(pnlManageBar.getBtnUndo().getName());

                    if (undoRedo.getUndoStack().isEmpty()) {
                        pnlManageBar.getBtnUndo().setEnabled(false);
                    }
                }
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnRedo().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnRedo().setForeground(Color.RED);
                pnlManageBar.getBtnRedo().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnRedo().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnRedo().setForeground(Color.BLACK);
                pnlManageBar.getBtnRedo().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }

        });

        pnlManageBar.getBtnRedo().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnRedo().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnRedo().setForeground(Color.RED);
                pnlManageBar.getBtnRedo().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

//        Xử lý sự kiện nút redo  
        pnlManageBar.getBtnRedo().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (!undoRedo.getRedoStack().isEmpty()) {
                    ObjectAction objectActionRedo = undoRedo.redo();
                    GiaoVien teacher = (GiaoVien) objectActionRedo.getObjects().get(0);
                    Object[] row = {
                        teacher.getMaGV(), teacher.getHo(), teacher.getTen(),
                        teacher.getDiaChi(), teacher.getMaKH()};

                    objectActionExecute(objectActionRedo, row);

                    pnlManageBar.disableManageButtons(pnlManageBar.getBtnRedo().getName());

                    if (undoRedo.getRedoStack().isEmpty()) {
                        pnlManageBar.getBtnRedo().setEnabled(false);
                    }
                }
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnRedo().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnRedo().setForeground(Color.RED);
                pnlManageBar.getBtnRedo().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnRedo().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnRedo().setForeground(Color.BLACK);
                pnlManageBar.getBtnRedo().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });

        pnlManageBar.getBtnRedo().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnRedo().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnRedo().setForeground(Color.RED);
                pnlManageBar.getBtnRedo().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

//        Xử lý sự kiện nút reload  
        pnlManageBar.getBtnReload().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
//                Reset dữ liệu của bộ nhớ tạm, undo, redo
                objectActions.clear();
                undoRedo.reset();
                ((DefaultTableModel) tblData.getModel()).setRowCount(0);

                try {
                    //                Load lại dữ liệu
                    GiangVienController.renderData(PnlTeacherManager.this);
                } catch (SQLException ex) {
                    Logger.getLogger(PnlTeacherManager.class.getName()).log(Level.SEVERE, null, ex);
                }

//                Reset form nhập liệu
                delectTeacherField();

//                Reset thanh công cụ
                pnlManageBar.disableManageButtons(pnlManageBar.getBtnReload().getName());
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnReload().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnReload().setForeground(Color.RED);
                pnlManageBar.getBtnReload().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnReload().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnReload().setForeground(Color.BLACK);
                pnlManageBar.getBtnReload().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });

        pnlManageBar.getBtnReload().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnReload().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnReload().setForeground(Color.RED);
                pnlManageBar.getBtnReload().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

//        Xử lý sự kiện nút export file
        pnlManageBar.getBtnExportFile().addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                ExportFileChoice exportFileChoice = new ExportFileChoice(frmMain, true, tabName, tblData);
                exportFileChoice.setLocationRelativeTo(null);
                exportFileChoice.setVisible(true);
            }

            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnExportFile().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnExportFile().setForeground(Color.RED);
                pnlManageBar.getBtnExportFile().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }

            @Override
            public void mouseExited(MouseEvent e) {
                pnlManageBar.getBtnExportFile().setFont(new Font("Segoe UI", 0, 12));
                pnlManageBar.getBtnExportFile().setForeground(Color.BLACK);
                pnlManageBar.getBtnExportFile().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
            }
        });

        pnlManageBar.getBtnExportFile().addMouseMotionListener(new MouseMotionAdapter() {
            @Override
            public void mouseMoved(MouseEvent e) {
                pnlManageBar.getBtnExportFile().setFont(new Font("Segoe UI", 1, 12));
                pnlManageBar.getBtnExportFile().setForeground(Color.RED);
                pnlManageBar.getBtnExportFile().setCursor(new Cursor(Cursor.HAND_CURSOR));
            }
        });

    }

//    Methods
    public void initMyComponents(String tabName, FrmMain frmMain) {
        this.tabName = tabName;
        this.frmMain = frmMain;

        pnlManageBarContainer.add((pnlManageBar = new PnlManageBar()));
        pnlDataEntryFormContainer.add((pnlTeacherInfo = new PnlTeacherInfo()));

        pnlTeacherInfo.getBtnControlLogin().setEnabled(false);

        try {
            //lấy các giáo viên thuộc nhóm quyền hiện tại
            stringList = CreateLoginRepository.findAll();

            //lấy toàn bộ các user trên databae để xem nó đã có hay chưa
            stringList1 = CreateLoginRepository.findAll99();

        } catch (SQLException ex) {
            Logger.getLogger(PnlTeacherManager.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    //hàm này dùng để đổ dữ liệu vào bảng
    public void fillTableForTeacher(List<ObjectAction> objectActions) {
        DefaultTableModel model = (DefaultTableModel) tblData.getModel();
        model.setRowCount(0);

        for (ObjectAction objectAction : objectActions) {
            List<String> row = new ArrayList<>();
            row.add(((GiaoVien) objectAction.getObjects().get(0)).getMaGV());
            row.add(((GiaoVien) objectAction.getObjects().get(0)).getHo());
            row.add(((GiaoVien) objectAction.getObjects().get(0)).getTen());
            row.add(((GiaoVien) objectAction.getObjects().get(0)).getDiaChi());
            row.add(((GiaoVien) objectAction.getObjects().get(0)).getMaKH());
            model.addRow(row.toArray());

        }
    }

    //hàm này dùng để ngăn hạn chế chắc năng của người dùng
    public void disableComponents(String groupName) {
        switch (groupName) {
            case "TRUONG":
                pnlManageBar.getBtnAdd().setEnabled(false);
                pnlManageBar.getBtnUpdate().setEnabled(false);
                pnlManageBar.getBtnDelete().setEnabled(false);
                pnlManageBar.getBtnSave().setEnabled(false);
                pnlManageBar.getBtnUndo().setEnabled(false);
                break;
            default:
                cboSide.setEnabled(false);
        }
    }

    //hàm này dùng để hiện thị tên cơ sở 
    public void fillSideComboBox(String groupName) throws IOException {
        DefaultComboBoxModel model = new DefaultComboBoxModel();
        switch (groupName) {
            case "TRUONG":
                model.addAll(new SubscriberService().getActiveSubcribers(SubscribersVariables.subscribers));
                break;
            default:
                model.addElement(LoginVariables.databaseConnector.getAccount().getSubscriber());
        }
        cboSide.setModel(model);
    }

    //hàm này dùng để khi hiển dữ liệu lên các filed 
    public void fillTeacherField(Object object) {
        GiaoVien teacher = (GiaoVien) object;

        // dùng để so sánh khi mình tay đổi mã giảng viên thì vẫn biết giảng viên nào thay đổi
        magv = teacher.getMaGV();

        //sẽ chuyền mã khoa đã chọn mà biến mã khoa ở trong frmMain để chuyển bị taọ form quản lý lớp
        frmMain.setMagv(teacher.getMaGV());

        //sẽ kiểm tra nếu mã giáo viên vừa nhấn có trong nhóm quyền của tk hiện tại thì nút quản lý sẽ được sáng
        if (stringList.contains(teacher.getMaGV().strip())) {
            pnlTeacherInfo.getBtnControlLogin().setEnabled(true);
        } else {
            pnlTeacherInfo.getBtnControlLogin().setEnabled(false);
        }
        
        //kiểm tra xem nếu tài giáo viên chưa có tài khoản thì nút sáng
        if (stringList1.contains(teacher.getMaGV().strip()) == false) {
            pnlTeacherInfo.getBtnControlLogin().setEnabled(true);
        } 
        
        
        pnlTeacherInfo.getTxtTeacherID().setText(teacher.getMaGV());
        pnlTeacherInfo.getTxtHo().setText(teacher.getHo());
        pnlTeacherInfo.getTxtTen().setText(teacher.getTen());
        pnlTeacherInfo.getTxtDiaChi().setText(teacher.getDiaChi());
        pnlTeacherInfo.setSelectedKhoaItem(teacher.getMaKH());
    }

    //hàm này dùng để gắn dữ liệu kiểu giáo viên vào kiểu dữ liệu object
    public Object getObjectFromRow(int rowIndex) {
        Object object;
        TableModel model = tblData.getModel();
        object = new GiaoVien(
                model.getValueAt(rowIndex, 0).toString(),
                model.getValueAt(rowIndex, 1).toString(),
                model.getValueAt(rowIndex, 2).toString(),
                model.getValueAt(rowIndex, 3).toString(),
                model.getValueAt(rowIndex, 4).toString());

        return object;
    }

    //hàm này dùng để xóa các filed 
    public void delectTeacherField() {
        pnlTeacherInfo.getTxtTeacherID().setText("");
        pnlTeacherInfo.getTxtHo().setText("");
        pnlTeacherInfo.getTxtTen().setText("");
        pnlTeacherInfo.getTxtDiaChi().setText("");
        //pnlTeacherInfo.getTxtKhoa().setText("");
    }

    //hàm này dùng để tạo mã tự động cho giảng viên
    public String creatMaGV() {
        int max = 0;
        for (ObjectAction objectAction : objectActions) {
            GiaoVien gv = (GiaoVien) objectAction.getObjects().get(0);
            String a = gv.getMaGV().replace("TH", "");
            int b = Integer.parseInt(a.strip());
            if (b > max) {
                max = b;
            } else {
                max = max;
            }

        }
        String makh = "TH" + String.valueOf(max + 1);
        return makh;
    }

    //hàm này dùng để để undo
//    Getters and setters
    public List<ObjectAction> getObjectActions() {
        return objectActions;
    }

    public void setObjectActions(List<Object> objects) {
        for (int i = 0; i < objects.size(); ++i) {
            this.objectActions.add(new ObjectAction(i, objects.get(i)));
        }
    }

    public PnlTeacherInfo getPnlTeacherInfo() {
        return pnlTeacherInfo;
    }

    public void setPnlTeacherInfo(PnlTeacherInfo pnlTeacherInfo) {
        this.pnlTeacherInfo = pnlTeacherInfo;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboSide;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnlDataEntryFormContainer;
    private javax.swing.JPanel pnlManageBarContainer;
    private javax.swing.JTable tblData;
    // End of variables declaration//GEN-END:variables
}
